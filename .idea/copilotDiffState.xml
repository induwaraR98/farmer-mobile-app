<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/_layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/_layout.tsx" />
              <option name="originalContent" value="// ===========================================&#10;// File: app/_layout.tsx&#10;// This file needs to be updated to include the new complains screen&#10;// in the navigation stack. Add the new Stack.Screen component.&#10;// ===========================================&#10;&#10;import { Stack } from 'expo-router';&#10;import './globals.css';&#10;import React from 'react';&#10;&#10;const RootLayout = () =&gt; {&#10;    return (&#10;        &lt;Stack&gt;&#10;            &lt;Stack.Screen name=&quot;index&quot; options={{ headerShown: false }} /&gt;&#10;            &lt;Stack.Screen name=&quot;screens/Complains&quot; options={{ title: 'Submit a Complaint' }} /&gt;&#10;            {/* Add the new ScanDisease screen here */}&#10;            &lt;Stack.Screen name=&quot;screens/ScanDisease&quot; options={{ title: 'Disease Scan' }} /&gt;&#10;            {/* You'll add SocialNetwork and Other screens here later */}&#10;            &lt;Stack.Screen name=&quot;screens/SocialNetwork&quot; options={{ title: 'Social Network' }} /&gt;&#10;            &lt;Stack.Screen name=&quot;screens/Other&quot; options={{ title: 'Other Services' }} /&gt;&#10;        &lt;/Stack&gt;&#10;    );&#10;};&#10;export default RootLayout;" />
              <option name="updatedContent" value="// ===========================================&#10;// File: app/_layout.tsx&#10;// This file needs to be updated to include the new complains screen&#10;// in the navigation stack. Add the new Stack.Screen component.&#10;// ===========================================&#10;&#10;import { Stack } from 'expo-router';&#10;import './globals.css';&#10;import React from 'react';&#10;&#10;const RootLayout = () =&gt; {&#10;    return (&#10;        &lt;Stack&gt;&#10;            &lt;Stack.Screen name=&quot;index&quot; options={{ headerShown: false }} /&gt;&#10;            &lt;Stack.Screen name=&quot;Complains&quot; options={{ title: 'Submit a Complaint' }} /&gt;&#10;            &lt;Stack.Screen name=&quot;ScanDisease&quot; options={{ title: 'Disease Scan' }} /&gt;&#10;            &lt;Stack.Screen name=&quot;SocialNetwork&quot; options={{ title: 'Social Network' }} /&gt;&#10;            {/* &lt;Stack.Screen name=&quot;Other&quot; options={{ title: 'Other Services' }} /&gt; */}&#10;        &lt;/Stack&gt;&#10;    );&#10;};&#10;export default RootLayout;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/index.tsx" />
              <option name="originalContent" value="// ===========================================&#10;// File: app/index.tsx&#10;// This file is the main home screen of the application.&#10;// It uses the HomeButton component to display links to various other screens.&#10;// The HomeButtons now have different colors and are larger in size.&#10;// ===========================================&#10;&#10;import { StatusBar } from 'expo-status-bar';&#10;import { View, Text, ScrollView } from 'react-native';&#10;import React from 'react';&#10;import { SafeAreaView } from 'react-native-safe-area-context';&#10;import { Stack } from 'expo-router';&#10;import HomeButton from './components/HomeButtons';&#10;import Header from './components/Header';&#10;&#10;const HomeScreen = () =&gt; {&#10;    return (&#10;        &lt;SafeAreaView className=&quot;flex-1 bg-gray-100&quot;&gt;&#10;            &lt;Stack.Screen options={{ headerShown: false }} /&gt;&#10;            &lt;Header /&gt;&#10;            &lt;ScrollView className=&quot;flex-1 p-4&quot;&gt;&#10;                &lt;View className=&quot;items-center justify-center&quot;&gt;&#10;                    &lt;Text className=&quot;text-3xl font-bold text-gray-800 mt-8 mb-4&quot;&gt;&#10;                        Welcome to the App&#10;                    &lt;/Text&gt;&#10;                    &lt;Text className=&quot;text-base text-gray-600 mb-8 text-center px-4&quot;&gt;&#10;                        A utility app for managing tasks, submitting complaints, and more.&#10;                    &lt;/Text&gt;&#10;&#10;                    &lt;View className=&quot;flex-row flex-wrap justify-center items-start&quot;&gt;&#10;                        {/* 1. Scan Disease */}&#10;                        &lt;HomeButton title=&quot;Scan Disease&quot; href=&quot;/ScanDisease&quot; color=&quot;red&quot; /&gt;&#10;&#10;                        {/* 2. Complains */}&#10;                        &lt;HomeButton title=&quot;Complains&quot; href=&quot;/Complains&quot; color=&quot;blue&quot; /&gt;&#10;&#10;                        {/* 3. Social Network */}&#10;                        &lt;HomeButton title=&quot;Social&quot; href=&quot;/SocialNetwork&quot; color=&quot;green&quot; /&gt;&#10;&#10;                        {/* 4. Others */}&#10;                        {/* &lt;HomeButton title=&quot;Other Section&quot; href=&quot;/screens/Other&quot; /&gt; */}&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/ScrollView&gt;&#10;            &lt;StatusBar style=&quot;auto&quot; /&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;export default HomeScreen;&#10;" />
              <option name="updatedContent" value="// ===========================================&#10;// File: app/index.tsx&#10;// This file is the main home screen of the application.&#10;// It uses the HomeButton component to display links to various other screens.&#10;// The HomeButtons now have different colors and are larger in size.&#10;// ===========================================&#10;&#10;import { StatusBar } from 'expo-status-bar';&#10;import { View, Text, ScrollView } from 'react-native';&#10;import React from 'react';&#10;import { SafeAreaView } from 'react-native-safe-area-context';&#10;import { Stack } from 'expo-router';&#10;import HomeButton from './components/HomeButtons';&#10;import Header from './components/Header';&#10;&#10;const HomeScreen = () =&gt; {&#10;    return (&#10;        &lt;SafeAreaView className=&quot;flex-1 bg-gray-100&quot;&gt;&#10;            &lt;Stack.Screen options={{ headerShown: false }} /&gt;&#10;            &lt;Header /&gt;&#10;            &lt;ScrollView className=&quot;flex-1 p-4&quot;&gt;&#10;                &lt;View className=&quot;items-center justify-center&quot;&gt;&#10;                    &lt;Text className=&quot;text-3xl font-bold text-gray-800 mt-8 mb-4&quot;&gt;&#10;                        Welcome to the App&#10;                    &lt;/Text&gt;&#10;                    &lt;Text className=&quot;text-base text-gray-600 mb-8 text-center px-4&quot;&gt;&#10;                        A utility app for managing tasks, submitting complaints, and more.&#10;                    &lt;/Text&gt;&#10;&#10;                    &lt;View className=&quot;flex-row flex-wrap justify-center items-start&quot;&gt;&#10;                        {/* 1. Scan Disease */}&#10;                        &lt;HomeButton title=&quot;Scan Disease&quot; href={{ pathname: '/ScanDisease' }} color=&quot;red&quot; /&gt;&#10;&#10;                        {/* 2. Complains */}&#10;                        &lt;HomeButton title=&quot;Complains&quot; href={{ pathname: '/Complains' }} color=&quot;blue&quot; /&gt;&#10;&#10;                        {/* 3. Social Network */}&#10;                        &lt;HomeButton title=&quot;Social&quot; href={{ pathname: '/SocialNetwork' }} color=&quot;green&quot; /&gt;&#10;&#10;                        {/* 4. Others */}&#10;                        {/* &lt;HomeButton title=&quot;Other Section&quot; href=&quot;/screens/Other&quot; /&gt; */}&#10;                    &lt;/View&gt;&#10;                &lt;/View&gt;&#10;            &lt;/ScrollView&gt;&#10;            &lt;StatusBar style=&quot;auto&quot; /&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;export default HomeScreen;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/screens/ScanDisease.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/screens/ScanDisease.tsx" />
              <option name="originalContent" value="// ===========================================&#10;// File: app/screens/ScanDisease.tsx&#10;// This screen uses the device's camera to capture a photo&#10;// and provides buttons to check, clear, or upload the image.&#10;// ===========================================&#10;&#10;import { View, Text, StyleSheet, TouchableOpacity, Alert, Image } from 'react-native';&#10;import React, { useState, useRef, useEffect } from 'react';&#10;import { SafeAreaView } from 'react-native-safe-area-context';&#10;import { Stack } from 'expo-router';&#10;import { Camera, CameraType } from 'expo-camera';&#10;&#10;const ScanDiseaseScreen = () =&gt; {&#10;    const [hasPermission, setHasPermission] = useState&lt;boolean | null&gt;(null);&#10;    const [imageUri, setImageUri] = useState&lt;string | null&gt;(null);&#10;    const cameraRef = useRef&lt;Camera&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        (async () =&gt; {&#10;            // Request camera permissions when the component mounts&#10;            const { status } = await Camera.requestCameraPermissionsAsync();&#10;            setHasPermission(status === 'granted');&#10;        })();&#10;    }, []);&#10;&#10;    // Function to take a photo&#10;    const handleCapture = async () =&gt; {&#10;        if (cameraRef.current) {&#10;            const photo = await cameraRef.current.takePictureAsync();&#10;            setImageUri(photo.uri);&#10;        }&#10;    };&#10;&#10;    // Function to clear the captured photo&#10;    const handleClear = () =&gt; {&#10;        setImageUri(null);&#10;    };&#10;&#10;    // Function to simulate checking the photo&#10;    const handleCheck = () =&gt; {&#10;        if (imageUri) {&#10;            Alert.alert('Checking...', 'This would send the image for analysis.');&#10;        } else {&#10;            Alert.alert('No image', 'Please take a picture first.');&#10;        }&#10;    };&#10;&#10;    // Function to simulate uploading the photo&#10;    const handleUpload = () =&gt; {&#10;        if (imageUri) {&#10;            Alert.alert('Uploading...', 'This would upload the image to a server.');&#10;        } else {&#10;            Alert.alert('No image', 'Please take a picture first.');&#10;        }&#10;    };&#10;&#10;    if (hasPermission === null) {&#10;        return (&#10;            &lt;SafeAreaView style={styles.container}&gt;&#10;                &lt;Text className=&quot;text-xl text-center&quot;&gt;Requesting camera permission...&lt;/Text&gt;&#10;            &lt;/SafeAreaView&gt;&#10;        );&#10;    }&#10;    if (hasPermission === false) {&#10;        return (&#10;            &lt;SafeAreaView style={styles.container}&gt;&#10;                &lt;Text className=&quot;text-xl text-center&quot;&gt;No access to camera&lt;/Text&gt;&#10;            &lt;/SafeAreaView&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;SafeAreaView style={styles.container}&gt;&#10;            &lt;Stack.Screen options={{ title: 'Disease Scan' }} /&gt;&#10;            &lt;Text className=&quot;text-2xl font-bold text-gray-800 my-4 text-center&quot;&gt;&#10;                Scan Plant Disease&#10;            &lt;/Text&gt;&#10;&#10;            {/* Camera View */}&#10;            &lt;View style={styles.cameraContainer}&gt;&#10;                {imageUri ? (&#10;                    &lt;Image source={{ uri: imageUri }} style={styles.previewImage} /&gt;&#10;                ) : (&#10;                    &lt;Camera&#10;                        style={styles.camera}&#10;                        ref={cameraRef}&#10;                        type={CameraType.back}&#10;                    /&gt;&#10;                )}&#10;            &lt;/View&gt;&#10;&#10;            {/* Control Buttons */}&#10;            &lt;View style={styles.buttonContainer}&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleCapture}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Capture&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleClear}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Clear&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleCheck}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Check&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleUpload}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Upload&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    container: {&#10;        flex: 1,&#10;        backgroundColor: '#f3f4f6', // Equivalent to Tailwind's bg-gray-100&#10;    },&#10;    cameraContainer: {&#10;        flex: 1,&#10;        marginHorizontal: 16,&#10;        marginVertical: 10,&#10;        borderRadius: 12,&#10;        overflow: 'hidden',&#10;        shadowColor: '#000',&#10;        shadowOffset: { width: 0, height: 2 },&#10;        shadowOpacity: 0.1,&#10;        shadowRadius: 4,&#10;        elevation: 5,&#10;    },&#10;    camera: {&#10;        flex: 1,&#10;    },&#10;    previewImage: {&#10;        flex: 1,&#10;        resizeMode: 'contain',&#10;    },&#10;    buttonContainer: {&#10;        flexDirection: 'row',&#10;        justifyContent: 'space-around',&#10;        alignItems: 'center',&#10;        padding: 16,&#10;        backgroundColor: '#fff',&#10;        borderTopLeftRadius: 20,&#10;        borderTopRightRadius: 20,&#10;        shadowColor: '#000',&#10;        shadowOffset: { width: 0, height: -2 },&#10;        shadowOpacity: 0.1,&#10;        shadowRadius: 4,&#10;        elevation: 5,&#10;    },&#10;    button: {&#10;        backgroundColor: '#ef4444', // Red-500&#10;        paddingVertical: 12,&#10;        paddingHorizontal: 24,&#10;        borderRadius: 8,&#10;        marginHorizontal: 4,&#10;    },&#10;    buttonText: {&#10;        color: 'white',&#10;        fontSize: 16,&#10;        fontWeight: 'bold',&#10;        textAlign: 'center',&#10;    },&#10;});&#10;&#10;export default ScanDiseaseScreen;&#10;" />
              <option name="updatedContent" value="// ===========================================&#10;// File: app/screens/ScanDisease.tsx&#10;// This screen uses the device's camera to capture a photo&#10;// and provides buttons to check, clear, or upload the image.&#10;// ===========================================&#10;&#10;import { View, Text, StyleSheet, TouchableOpacity, Alert, Image } from 'react-native';&#10;import React, { useState, useRef, useEffect } from 'react';&#10;import { SafeAreaView } from 'react-native-safe-area-context';&#10;import { Stack } from 'expo-router';&#10;import { Camera } from 'expo-camera/Camera';&#10;import type { Camera as CameraType } from 'expo-camera/build/Camera.types';&#10;&#10;const ScanDiseaseScreen = () =&gt; {&#10;    const [hasPermission, setHasPermission] = useState&lt;boolean | null&gt;(null);&#10;    const [imageUri, setImageUri] = useState&lt;string | null&gt;(null);&#10;    const cameraRef = useRef&lt;CameraType | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        (async () =&gt; {&#10;            // Request camera permissions when the component mounts&#10;            const { status } = await Camera.requestCameraPermissionsAsync();&#10;            setHasPermission(status === 'granted');&#10;        })();&#10;    }, []);&#10;&#10;    // Function to take a photo&#10;    const handleCapture = async () =&gt; {&#10;        if (cameraRef.current) {&#10;            const photo = await cameraRef.current.takePictureAsync();&#10;            setImageUri(photo.uri);&#10;        }&#10;    };&#10;&#10;    // Function to clear the captured photo&#10;    const handleClear = () =&gt; {&#10;        setImageUri(null);&#10;    };&#10;&#10;    // Function to simulate checking the photo&#10;    const handleCheck = () =&gt; {&#10;        if (imageUri) {&#10;            Alert.alert('Checking...', 'This would send the image for analysis.');&#10;        } else {&#10;            Alert.alert('No image', 'Please take a picture first.');&#10;        }&#10;    };&#10;&#10;    // Function to simulate uploading the photo&#10;    const handleUpload = () =&gt; {&#10;        if (imageUri) {&#10;            Alert.alert('Uploading...', 'This would upload the image to a server.');&#10;        } else {&#10;            Alert.alert('No image', 'Please take a picture first.');&#10;        }&#10;    };&#10;&#10;    if (hasPermission === null) {&#10;        return (&#10;            &lt;SafeAreaView style={styles.container}&gt;&#10;                &lt;Text className=&quot;text-xl text-center&quot;&gt;Requesting camera permission...&lt;/Text&gt;&#10;            &lt;/SafeAreaView&gt;&#10;        );&#10;    }&#10;    if (!hasPermission) {&#10;        return (&#10;            &lt;SafeAreaView style={styles.container}&gt;&#10;                &lt;Text className=&quot;text-xl text-center&quot;&gt;No access to camera&lt;/Text&gt;&#10;            &lt;/SafeAreaView&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;SafeAreaView style={styles.container}&gt;&#10;            &lt;Stack.Screen options={{ title: 'Disease Scan' }} /&gt;&#10;            &lt;Text className=&quot;text-2xl font-bold text-gray-800 my-4 text-center&quot;&gt;&#10;                Scan Plant Disease&#10;            &lt;/Text&gt;&#10;&#10;            {/* Camera View */}&#10;            &lt;View style={styles.cameraContainer}&gt;&#10;                {imageUri ? (&#10;                    &lt;Image source={{ uri: imageUri }} style={styles.previewImage} /&gt;&#10;                ) : (&#10;                    &lt;Camera&#10;                        style={styles.camera}&#10;                        ref={cameraRef}&#10;                        type=&quot;back&quot;&#10;                    /&gt;&#10;                )}&#10;            &lt;/View&gt;&#10;&#10;            {/* Control Buttons */}&#10;            &lt;View style={styles.buttonContainer}&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleCapture}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Capture&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleClear}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Clear&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleCheck}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Check&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;                &lt;TouchableOpacity style={styles.button} onPress={handleUpload}&gt;&#10;                    &lt;Text style={styles.buttonText}&gt;Upload&lt;/Text&gt;&#10;                &lt;/TouchableOpacity&gt;&#10;            &lt;/View&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    container: {&#10;        flex: 1,&#10;        backgroundColor: '#f3f4f6', // Equivalent to Tailwind's bg-gray-100&#10;    },&#10;    cameraContainer: {&#10;        flex: 1,&#10;        marginHorizontal: 16,&#10;        marginVertical: 10,&#10;        borderRadius: 12,&#10;        overflow: 'hidden',&#10;        shadowColor: '#000',&#10;        shadowOffset: { width: 0, height: 2 },&#10;        shadowOpacity: 0.1,&#10;        shadowRadius: 4,&#10;        elevation: 5,&#10;    },&#10;    camera: {&#10;        flex: 1,&#10;    },&#10;    previewImage: {&#10;        flex: 1,&#10;        resizeMode: 'contain',&#10;    },&#10;    buttonContainer: {&#10;        flexDirection: 'row',&#10;        justifyContent: 'space-around',&#10;        alignItems: 'center',&#10;        padding: 16,&#10;        backgroundColor: '#fff',&#10;        borderTopLeftRadius: 20,&#10;        borderTopRightRadius: 20,&#10;        shadowColor: '#000',&#10;        shadowOffset: { width: 0, height: -2 },&#10;        shadowOpacity: 0.1,&#10;        shadowRadius: 4,&#10;        elevation: 5,&#10;    },&#10;    button: {&#10;        backgroundColor: '#ef4444', // Red-500&#10;        paddingVertical: 12,&#10;        paddingHorizontal: 24,&#10;        borderRadius: 8,&#10;        marginHorizontal: 4,&#10;    },&#10;    buttonText: {&#10;        color: 'white',&#10;        fontSize: 16,&#10;        fontWeight: 'bold',&#10;        textAlign: 'center',&#10;    },&#10;});&#10;&#10;export default ScanDiseaseScreen;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>